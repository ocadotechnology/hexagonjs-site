@version 0.12.7

  @description
    A component for displaying the progress of an activity.

  @examples

    @example
      @html
        <div id="example" class="meter-example"></div>
      @js
        var meter = new hx.Meter('#example')

        meter.value({
          unitText: 'Completed',
          total: 1000,
          completed: 642,
          tracker: 570,
          marker: 870,
          markerText: 'Marker: ' + 870
        })

      @css
        .meter-example {
          width: 100%;
          height: 100%;
        }

  @api Meter
    @prototype hx.Meter
      @added
      @constructor
        @param selector [String/HTMLElement]: A unique css selector or a HTMLElement that identifies the container for the meter.
        @param? options [Object]
          @property useMarker [Boolean]
            Wheter or not to use the marker part of the meter
            @default false

          @property useTracker [Boolean]
            Wheter or not to use the tracker part of the meter
            @default false

          @property trackerWidth [Number]
            The width of the tracker arc (value between 0 and 1)

          @property progressWidth [Number]
            The width of the main progress arc (value between 0 and 1)

          @property markerInnerExtend [Number]
            The amount to extend the radius of the marker towards the centre of the semicircle (value between 0 and 1)

          @property markerOuterExtend [Number]
            The amount to extend the radius of the marker towards the outside of the semicircle (value between 0 and 1)

          @property markerSize [Number]
            The size of the marker in radians

          @property arcPadding [Number]
            The padding between the tracker and the main progress arcs (value between 0 and 1)

          @property markerPadding [Number]
            The padding that using the marker introduces to the outside of the meter (value between 0 and 1)

          @property progressBackgroundCol [String]
            The background color of the progress arc as a css string

          @property progressCol [String]
            The color of the progress arc as a css string

          @property trackerCol [String]
            The color of the tracker arc as a css string

          @property trackerBackgroundCol [String]
            The background color of the tracker arc as a css string

          @property markerCol [String]
            The color of the marker as a css string

      @method value
        @description
          Updates the various values in the meter. All the values are optional.

          @codeblock js
            meter.value({
              unitText: 'Completed',
              total: 1000,
              completed: 246,
              tracker: 570,
              marker: 120,
              markerText: 'Marker: ' + 120
            })

        @param data [Object]
#XXX: duplicated in the value() returns section - put into a reusable @define block
          @property total [Number]: The total capacity of a meter
          @property completed [Number]: The value of the main progress arc
          @property tracker [Number]: The progress of the tracker progress arc (if used)
          @property marker [Number]: The value of the marker (if used)
          @property markerText [String]: The annotation for the marker (if used). Space is limited for the marker text, so keep it as short as possible.
          @property unitText [String]: The text shown at the bottom of the meter, indicating the unit of measurement (eg KG, Seconds, Delivered, etc)

        @returns Meter: Returns this meter if data is provided, or the current data set if no data object is supplied.

      @method value
        @description: Gets the current value object for the meter.
        @returns Object: The current values.
          @property total [Number]: The total capacity of a meter
          @property completed [Number]: The value of the main progress arc
          @property tracker [Number]: The progress of the tracker progress arc (if used)
          @property marker [Number]: The value of the marker (if used)
          @property markerText [String]: The annotation for the marker (if used). Space is limited for the marker text, so keep it as short as possible.
          @property unitText [String]: The text shown at the bottom of the meter, indicating the unit of measurement (eg KG, Seconds, Delivered, etc)

      @method render
        @description
          Re-renders the meter. If the options are changed, you will want to use this method to update the meter with the changes. This does not need to be called after calling value({...}). Meters also automatically re-render when their container is resized.
        @returns Meter: This meter

  @theme


  @seeAlso
